"""Test configuration and fixtures."""

import pytest
from unittest.mock import Mock, AsyncMock
from fastapi.testclient import TestClient

from config import Config
from services import APIClientService
from main import app


@pytest.fixture
def mock_config():
    """Mock configuration for testing."""
    return Config(
        mistral_api_key="test_mistral_key",
        openai_api_key="test_openai_key",
        model="gpt-3.5-turbo",
        system_prompt="Test prompt for analysis",
        frontend_url="http://localhost:9002",
        max_file_size=1024*1024,  # 1MB for tests
        save_extracted_content=False,  # Default to false for tests
        upload_dir="test_uploads",
        output_dir="test_outputs"
    )


@pytest.fixture
def mock_mistral_client():
    """Mock Mistral client for testing."""
    client = Mock()
    client.files.upload.return_value = Mock(id="test_file_id")
    client.files.get_signed_url.return_value = Mock(url="https://test.url")
    client.files.delete.return_value = None
    
    # Mock OCR response
    mock_page = Mock()
    mock_page.markdown = "# Test Content\nThis is test content."
    mock_page.images = []
    
    mock_ocr_response = Mock()
    mock_ocr_response.pages = [mock_page]
    
    client.ocr.process.return_value = mock_ocr_response
    return client


@pytest.fixture
def mock_openai_client():
    """Mock AsyncOpenAI client for testing."""
    client = AsyncMock()
    
    # Mock chat completion response
    mock_response = Mock()
    mock_response.choices = [Mock()]
    mock_response.choices[0].message.content = "Test insights generated by AI"
    
    client.chat.completions.create.return_value = mock_response
    return client


@pytest.fixture
def api_client_service(mock_config):
    """Mock API client service."""
    service = APIClientService(mock_config)
    service._mistral_client = Mock()
    service._openai_client = AsyncMock()
    return service


@pytest.fixture
def test_client():
    """Test client for API testing."""
    return TestClient(app)


@pytest.fixture
def sample_pdf_bytes():
    """Sample PDF bytes for testing."""

    return b'%PDF-1.4\n1 0 obj\n<<\n/Type /Catalog\n/Pages 2 0 R\n>>\nendobj\n'
